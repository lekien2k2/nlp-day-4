import json, os, numpy as np, pandas as pd
from pathlib import Path
import streamlit as st
from sentence_transformers import SentenceTransformer
from dotenv import load_dotenv
from prompts import ANSWER_PROMPT, CRITIQUE_PROMPT

# OpenAI l√† optional ‚Äì ch·ªâ import khi th·∫≠t s·ª± c·∫ßn
try:
    from openai import OpenAI
except Exception:
    OpenAI = None

load_dotenv()
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY", "").strip()

st.set_page_config(page_title="VN Semantic QA (ViQuAD)", page_icon="üáªüá≥", layout="centered")
st.title("üáªüá≥ VN Semantic QA ‚Äì Demo map c√¢u h·ªèi ƒë·ªìng nghƒ©a")
st.caption("Ngu·ªìn d·ªØ li·ªáu: ViQuAD. T√¨m c√¢u t∆∞∆°ng t·ª± nh·∫•t b·∫±ng embedding ƒëa ng·ªØ v√† tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát.")



DATA_DIR = Path("data")
if not (DATA_DIR / "embeddings.npy").exists():
    st.error(
        "Ch∆∞a c√≥ index. H√£y ch·∫°y: python prepare_data.py r·ªìi python build_index.py"
    )
    st.stop()


# Load index
questions = json.loads((DATA_DIR / "questions.json").read_text(encoding="utf-8"))
answers = json.loads((DATA_DIR / "answers.json").read_text(encoding="utf-8"))
emb = np.load(DATA_DIR / "embeddings.npy")


# Embedder cho truy v·∫•n (c√πng model)
embedder = SentenceTransformer(
    "sentence-transformers/paraphrase-multilingual-mpnet-base-v2"
)


with st.sidebar:
    st.subheader("‚öôÔ∏è Tu·ª≥ ch·ªçn")
    topk = st.slider("S·ªë c√¢u t∆∞∆°ng t·ª± xem x√©t (k)", 1, 10, 5)
    threshold = st.slider("Ng∆∞·ª°ng ch·∫•p nh·∫≠n (cosine sim)", 0.50, 0.95, 0.70)
    want_crit = st.checkbox("B·∫≠t Self-Critique (OpenAI)", value=bool(OPENAI_API_KEY))


q = st.text_input("Nh·∫≠p c√¢u h·ªèi b·∫±ng ti·∫øng Vi·ªát", value="Th·ªß ƒë√¥ CHXHCN Vi·ªát Nam l√† g√¨?")
btn = st.button("H·ªèi")


if btn and q.strip():
    with st.spinner("ƒêang t√¨m c√¢u h·ªèi t∆∞∆°ng ƒë·ªìng..."):
        q_vec = embedder.encode([q], normalize_embeddings=True)
        # cosine scores shape (1, N)
        scores = np.matmul(q_vec, emb.T).reshape(-1)
        idx_sorted = np.argsort(-scores)[:topk]
        candidates = [(int(i), float(scores[i])) for i in idx_sorted]

    st.markdown("### üîé K·∫øt qu·∫£ t√¨m g·∫ßn nh·∫•t")
    for rank, (i, sc) in enumerate(candidates, start=1):
        st.write(f"**#{rank}** ¬∑ score = {sc:.3f}")
        with st.expander(questions[i]):
            st.markdown(f"**ƒê√°p √°n gold:** {answers[i]}")

    best_i, best_score = candidates[0]
    if best_score < threshold:
        st.warning(
            "‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y c√¢u h·ªèi t∆∞∆°ng t·ª± ƒë·ªß ng∆∞·ª°ng.\n\n‚Üí G·ª£i √Ω: th·ª≠ di·ªÖn ƒë·∫°t l·∫°i ho·∫∑c h·∫° ng∆∞·ª°ng threshold."
        )
        st.stop()

    candidate_answer = answers[best_i]

    # Baseline: tr·∫£ th·∫≥ng gold g·∫ßn nh·∫•t
    st.markdown("---")
    st.subheader("üü¶ Baseline (kh√¥ng ph·∫£n bi·ªán)")
    st.markdown(f"**C√¢u tr·∫£ l·ªùi (ƒë·ªÅ xu·∫•t):** {candidate_answer}")
    st.caption(f"Ngu·ªìn: c√¢u h·ªèi g·∫ßn nh·∫•t ¬∑ score={best_score:.3f}")

    # Optional self-critique via OpenAI
    st.markdown("---")
    st.subheader("üü™ Self-Critique (t·ª± ph·∫£n bi·ªán)")
    critique_text = None
    if want_crit and OPENAI_API_KEY and OpenAI:
        try:
            client = OpenAI(api_key=OPENAI_API_KEY)  # kh·ªüi t·∫°o TRONG try/catch
            prompt = CRITIQUE_PROMPT.format(question=q, candidate=candidate_answer)
            resp = client.chat.completions.create(
                model="gpt-4o-mini",  # ho·∫∑c gpt-4-turbo / gpt-3.5-turbo n·∫øu t√†i kho·∫£n kh√¥ng c√≥ 4o
                messages=[{"role": "user", "content": prompt}],
                temperature=0,
            )
            critique_text = resp.choices[0].message.content
            st.text_area("Ph·∫£n bi·ªán & ƒê√°p √°n cu·ªëi", value=critique_text, height=200)
        except Exception as e:
            st.error(f"Kh√¥ng b·∫≠t ƒë∆∞·ª£c Self-Critique (s·∫Ω d√πng Baseline). L√Ω do: {e}")
            st.text_area("Ph·∫£n bi·ªán & ƒê√°p √°n cu·ªëi", value=f"(Baseline) ƒê√°p √°n cu·ªëi: {candidate_answer}", height=120)
    else:
        st.info("Ch∆∞a b·∫≠t Self-Critique. ƒêang hi·ªÉn th·ªã ƒë√°p √°n Baseline.")
        st.text_area("Ph·∫£n bi·ªán & ƒê√°p √°n cu·ªëi", value=f"(Baseline) ƒê√°p √°n cu·ªëi: {candidate_answer}", height=120)

    # Nh√£n nhanh v·ªÅ ƒë·ªô t·ª± tin d·ª±a v√†o score
    conf = (
        "cao"
        if best_score >= 0.85
        else ("trung b√¨nh" if best_score >= 0.75 else "th·∫•p")
    )
    st.markdown(f"**ƒê·ªô t·ª± tin ng·ªØ nghƒ©a**: {conf} (cosine={best_score:.3f})")
